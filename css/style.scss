@mixin font-face($name, $file, $weight: normal, $style: normal) {
  @font-face {
    font-family: '#{$name}';
    src: url('../fonts/#{$file}.otf') format('otf'), url('../fonts/#{$file}.ttf') format('truetype');
    font-weight: $weight;
    font-style: $style;
  }
}

@include font-face('spoqa-sans', 'SpoqaHanSansNeo-Medium');
@include font-face('nixgon', 'NIXGONFONTS_L_2.0');

$black: #222222;
$gray: #999999;
$gray-light: #cccccc;
$white: #ffffff;
$violet: #98a2d6;
$mint: #70d3c2;
$coral: #ffa082;
//colors

$baseFont: 'spoqa-sans';
$headFont: 'nixgon';
// 폰트

$breakpoint-mobile: 335px;
$breakpoint-tablet: 758px;
$breakpoint-desktop: 1024px;
$breakpoint-desktop-wide: 1680px;
// 반응형 브레이크 포인트

$baseSize: 10px;
// px to rem 기준 사이즈

$icons: arrow_top, arrow_bottom, arrow_left, arrow_right, circle, ellipse, top_fill, top_line, x, blog, email, instagram, talk, twitter, location, star, user,
  birth, file, menu, plus, link, html, css, javascript, photoshop, illustrator, aftereffect, xd, figma;
// 아이콘 리스트

// *** variables ***

@mixin mobile {
  @media (max-width: #{$breakpoint-mobile - 1px}) {
    @content;
  }
}
@mixin tablet {
  @media (max-width: #{$breakpoint-tablet - 1px}) {
    @content;
  }
}
@mixin desktop {
  @media (min-width: #{$breakpoint-tablet}) {
    @content;
  }
}
@mixin desktopWide {
  @media (min-width: #{$breakpoint-desktop-wide}) {
    @content;
  }
}

@mixin hidden {
  display: none;
  opacity: 0;
  position: absolute;
  left: -999999px;
}
@mixin hiddenText {
  font-size: 1px;
  color: white;
  color: transparent;
  text-indent: -999999px;
  &::before {
    display: block !important;
  }
}

@mixin displayText {
  font-size: inherit !important;
  color: inherit;
  text-indent: inherit !important;
}

@mixin flexDiplay($align: flex-start, $justify: flex-start, $item: center) {
  display: flex;
  align-content: $align;
  justify-content: $justify;
  align-items: $item;
}

@mixin position($position: absolute, $top: 0, $lt: 0, $rt: auto, $bt: auto) {
  @if $position == fixed {
    position: fixed;
  } @else {
    position: $position;
  }
  top: $top;
  left: $lt;
  right: $rt;
  bottom: $bt;
}

@function unit($value) {
  @return $value / ($value * 0 + 1);
}
@function remSize($size) {
  $fontSize: unit($baseSize) * 0.1;
  @return #{$size * $fontSize}rem;
}
// px 단위 rem 으로 변환

@mixin ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: '';
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .ratioCon {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}
// 비율 유지

@mixin icons($size: 1rem) {
  font-size: $size;
  @each $name in $icons {
    &.icon_#{$name} {
      &::before {
        display: inline-block;
        content: '#{$name}';
        color: #fff;
        color: transparent;
        width: $size;
        height: $size;
        vertical-align: baseline;
        margin-right: $size * 0.3;
        text-indent: -999999px;
        background: {
          image: url('../images/icons/#{$name}.svg');
          size: cover;
        }
      }
    }
  }
}
.icon {
  @include icons();
}
i.icon {
  display: inline-block;
  vertical-align: middle;
  overflow: hidden;
  @include icons();
  @include hiddenText();
  &::before {
    display: block !important;
    float: left;
  }
}

@function headings($from, $to) {
  @if $from == $to {
    @return 'h#{$from}';
  } @else {
    @return 'h#{$from},' + headings($from + 1, $to);
  }
}
@for $i from 1 through 6 {
  $size: ($i + 1) * 0.5rem;
  $subSize: $size * 0.6;
  h#{7-$i} {
    font-family: $headFont;
    font-size: $size;
    font-weight: normal;
    text-align: center;
    margin: {
      top: $size * 0.8;
      bottom: $size * 0.8;
      left: 0;
      right: 0;
    }
    .subHead {
      font-size: $subSize;
      .icon {
        @include icons($subSize);
      }
    }
    .icon {
      @include icons($size);
    }
  }
  h#{4-$i} {
    text-transform: uppercase;
  }
  #{headings(4,6)} {
    .subHead {
      font-size: inherit;
    }
  }
}
// h1~h6 헤딩 태그 스타일

@mixin btnStyle($size: 1rem, $color: $violet) {
  padding: {
    top: $size * 0.3;
    left: $size * 0.6;
    right: $size * 0.6;
    bottom: $size * 0.3;
  }
  border: {
    radius: 4px;
    style: solid;
  }
  cursor: pointer;
  &.btn_stroke {
    background-color: transparent;
    background-color: inherit;
    border: {
      width: 1px;
      color: $color;
    }
    color: $color;
  }
  &.btn_fill {
    border: none;
    background-color: $color;
    color: $white;
  }
}

@mixin underbar($width: 2px, $color: $violet) {
  position: relative;
  display: inline-block;
  &:hover {
    &::after {
      display: block;
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      height: $width;
      width: 100%;
      background-color: $color;
      animation: underbar_ani 0.6s alternate;
    }
  }
}
@keyframes underbar_ani {
  from {
    width: 0;
  }
  to {
    width: 100%;
  }
}

@mixin modalThumbnail($width, $height) {
  .thumb {
    display: flex;
    flex-wrap: wrap;
    align-content: flex-start;
    width: 100%;
    height: 100%;
    .modalBtn {
      display: block;
      width: $width;
      height: $height;
      background: {
        repeat: no-repeat;
        size: cover;
        position: center;
      }
      position: relative;
      &:hover::before {
        position: absolute;
        top: 0;
        left: 0;
        display: block;
        width: 100%;
        height: 100%;
        backdrop-filter: blur(10px);
      }
    }
  }
}
// modal open button : thumbnail style End

.ui-dialog-titlebar {
  width: 100%;
  height: 5vh;
  @include flexDiplay(center, flex-end, center);
  .ui-dialog-title {
    display: none;
  }
  button.ui-button {
    border: 0;
    padding: 0;
    text-shadow: none;
    @include flexDiplay(center, center, center);
    width: 2rem;
    height: 2rem;
    background: none;
    &::before {
      margin-right: 0;
    }
  }
}
.ui-widget-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #ffffff80;
  backdrop-filter: blur(5px);
}
.ui-dialog {
  position: fixed;
  top: 0;
  left: 0;
  height: 100% !important;
  width: 80% !important;
  z-index: 9999;
  overflow: hidden;
  padding: 2vh 0;
  .modal {
    width: 100%;
    height: calc(100% - 5vh) !important;
    margin: 0 auto;
    overflow-y: auto !important;
    padding: 0 1vw;
    &-dialog {
      width: 100%;
      // height: 100%;
      margin: 0 auto;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: $gray-light 0 1px 15px;
      background-color: #ffffff;
      border: {
        width: 1px;
        style: solid;
        top-color: #ffffff99;
        right-color: #cccccc99;
        bottom-color: #cccccc99;
        left-color: #ffffff99;
      }
    }
    &-content {
      width: calc(100% + 15px);
      height: 100%;
      border: 0;
      background-color: rgba(255, 255, 255, 0.5);
      position: relative;
    }
  }
}
// *** mixin ***

html,
body,
* {
  line-height: normal;
  box-sizing: border-box;
}

.point {
  font-weight: bold;
  font-family: $headFont;
}
.hidden {
  @include hidden;
}
.hiddenText {
  @include hiddenText;
}

ul,
li {
  list-style: none;
  padding: 0;
  margin: 0;
}

.list {
  li {
    &::before {
      content: '●';
      margin-right: 10px;
      font-size: 0.8rem;
      color: $mint;
    }
  }
}
//리스트 스타일

a {
  text-decoration: none !important;
  color: inherit;
  &:hover,
  &:active,
  &:visited,
  &:focus {
    color: inherit;
  }
}
button {
  @include btnStyle();
}
.link {
  @include underbar();
}

// *** class ***
